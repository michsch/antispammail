// Linear Gradient with two colors for modern browsers without the corresponding IE-filter

// $direction ==> written in the standard-way: to bottom, to left ...
// $solid-color ==> replacement color for the one device that cannot show gradients or IE-filters
// $start-color ==> which color to start with
// $end-color ==> which color to end with

// $output ==> defines the output-type of the code
  // css3   ==> only CSS3-gradients
  // oldie  ==> only IE-filters for oldIE (versions before 9)
  // both   ==> both CSS3 and oldIE versions are printed

// $fallback ==> fallback color code for browsers that don't support gradients (oldIE)

// As there is a default direction there is no use for a fourth if-case.

@mixin ym-linear-gradient($direction: "to bottom", $start-color: #eee, $end-color: #ccc, $output: both, $fallback: $start-color) {
  $old-direction: top;
  $very-old-direction:"left top, left bottom";
  $ie-direction: 0;

  @if $direction == "to right" {
    $very-old-direction: "left top, right top";
    $old-direction: left;
    $ie-direction: 1;
  }

  @if $output != "oldie" {
    background-image: -webkit-gradient(linear, #{$very-old-direction}, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background-image:  -webkit-linear-gradient($old-direction, $start-color,$end-color);
    background-image:   -moz-linear-gradient($old-direction, $start-color,$end-color);
    background-image:    -ms-linear-gradient($old-direction, $start-color,$end-color);
    background-image:        unquote("linear-gradient(#{$direction}, #{$start-color},#{$end-color})");
  }

  @if $output != "css3" {
    background-color: $fallback;
    $iecolor1: ie-hex-str($start-color);
    $iecolor2: ie-hex-str($end-color);
    filter: progid:DXImageTransform.Microsoft.Gradient(GradientType=#{$ie-direction}, startColorstr='#{$iecolor1}', endColorstr='#{$iecolor2}');
    zoom: 1;
  }
}
